---
title: Development Setup
---
{::options parse_block_html="true" /}


TODO: nodejs and bundle
{:.alert.alert-warning} 

# Setting up a Cider-CI Development Environment 
{:.no_toc}

* Will be replaced with the ToC, excluding the "Contents" header
{:toc}


Prerequisites 
-------------

<div class="row"> <div class="col-md-6">
-   PostgreSQL version ≥ 9.4 (≤ 9.3 will not suffice!)
-   RabbitMQ version ≥ 3.0 (≥ 3.3 recommended)
-   JDK 7 or later
-   [Leiningen][] version ≥ 2.0 (≥ 2.5 recommended)
-   [Ruby][] ≥ 1.9 (≥ 2.1 recommended) with [Bundler][]
-   [Nodejs][]

The environment will by default require the following ports (in
addition to the ones used by PostgreSQL and RabbitMQ): 

* 8880 ‥ 8889
* 7880 ‥ 7889 
* 8443
</div> </div>


Project Checkout
---------------

<div class="row"> <div class="col-md-6">

A running instance of Cider-CI is composed of several services. See the
[Architecture](/development/architecture/) page for an overview. 

The source code for each service is a git submodule of the main
[Cider-CI](https://github.com/cider-ci/cider-ci) project. 

</div> <div class="col-md-6">
    git clone --recursive https://github.com/cider-ci/cider-ci.git
</div> </div>


Message-Queues - RabbitMQ
------------------------------------

<div class="row"> <div class="col-md-6">
We set up a vhost, a user and permit the user. 

The RabbitMQ [Management Plugin](https://www.rabbitmq.com/management.html)
allows us to verify the connection status via the Cider-CI User-Interface. 

</div> <div class="col-md-6">
    rabbitmqctl add_user cider-ci secret
    rabbitmqctl add_vhost cider-ci
    rabbitmqctl set_permissions -p cider-ci cider-ci ".*"  ".*" ".*"
    rabbitmqctl -p cider-ci list_permissions

    rabbitmq-plugins enable rabbitmq_management
    rabbitmqctl set_user_tags cider-ci administrator
</div> </div>

Database - PostgreSQL
---------------------

<div class="row"> <div class="col-md-6">
We set up the `cider-ci` role within [psql](http://www.postgresql.org/docs/current/static/app-psql.html): 
</div> <div class="col-md-6">
    CREATE ROLE "cider-ci" PASSWORD 'secret' createdb superuser login;
</div> </div>

<div class="row"> <div class="col-md-6">
We change into the directory of the Cider-CI User-Interface, 
configure, create the database and load some initial data to
work with. 
</div> <div class="col-md-6">
~~~ bash
cp config/database_dev.yml config/database.yml
bundle 
bundle exec rake db:create db:migrate
bundle exec rake db:seed 
~~~
</div> </div>


## Reverse Proxy 

<div class="row"> <div class="col-md-6">
A deployed environment of Cider-CI uses the Apache HTTP server as a reverse
proxy. A development environment uses the [Cider-CI Reverse Proxy][] instead.
The code is located in the `cider-ci/reverse-proxy` dictionary and the service
can be started by running `./bin/run` from within that directory. 


</div> <div class="col-md-6">
    cd reverse-proxy
    ./bin/run


</div> </div>


## User-Interface Service

The [Cider-CI User-Interface][] is a Ruby on Rails application. 

<div class="row"> <div class="col-md-6">
We start the web-server from within the directory of the Cider-CI User-Interface.
</div> <div class="col-md-6">
    bundle exec rails s -p 8880
</div> </div>

<div class="row"> <div class="col-md-6">
We visit the url <http://localhost:8888/cider-ci/ui/public> in a browser and should see a similar page as shown.
</div> <div class="col-md-6">
[![Welcome-Page](/development/setup/welcome-page.png){: .preview}](/development/setup/welcome-page.png) 
</div> </div>

<div class="row"> <div class="col-md-6">

We sign in with the user `admin` and password `secret` and follow the links
`Administration` → `Service stati`.
<http://localhost:8888/cider-ci/ui/admin/status> reveals that the message queue
is running but non of the services are:
</div> 
<div class="col-md-6">
[![Services-Offline](/development/setup/services-offline.png){: .preview}](/development/setup/services-offline.png) 
</div> </div>

## Clojure Services 

<div class="row"> <div class="col-md-6">
All of the remain services 
[Cider-CI API][],
[Cider-CI Builder][],
[Cider-CI Dispatcher][], 
[Cider-CI Executor][],
[Cider-CI Repository][], and 
[Cider-CI Storage][]
are written in clojure. Each of them comes with a `./bin/run` script which will
start a headless server.

We can alternatively start a REPL from inside each directory and then start the
service therein with `(-main)`. 
</div> <div class="col-md-6">
    cd SERVICE_DIRECTORY
    ./bin/run

or

    cd SERVICE_DIRECTORY
    lein repl
    (-main)
</div> </div>

<div class="alert alert-warning">
The services use relative paths to access files. 
It is crucial that they are started from within their 
own top level directory!
</div>


All of the services should now be listed `OK` at <http://localhost:8888/cider-ci/ui/admin/status>.


## Executor 

### Status of the Executor-Service 

<div class="row"> <div class="col-md-6">
The Executor-Services are listed on the `Administration` → `Executors` page
<http://localhost:8888/cider-ci/ui/admin/executors>. There is only one
configured in the default data set. It matches the parameters of the default
development executor and hence it should be up and running.

Note: other parameters, like the `traits` e.g., are taken from the default
setup when an executor is installed via the [Cider-CI Ansible Setup][] . They
might not match the given development environment.
</div> <div class="col-md-6">
[![Executors](/development/setup/executors.png){: .preview}](/development/setup/executors.png) 
</div> </div>


## Running a Job 

<div class="row"> <div class="col-md-6">
Running a job is the final test for our environment. The dataset comes
with a predefined repository. It features fairly simple examples. Some of the
defined tasks purposely fail with a certain probability. Hence, a failed
job can be a positive outcome of this test. Note, that a particular
job can only exist once for a given tree_id or commit. However, existing
jobs can be deleted.

</div> <div class="col-md-6">
[![Job](/development/setup/job.png){: .preview}](/development/setup/job.png) 
</div> </div>


  [Cider-CI API]: https://github.com/cider-ci/cider-ci_api
  [Cider-CI Ansible Setup]: https://github.com/cider-ci/cider-ci_ansible-setup
  [Cider-CI Builder]: https://github.com/cider-ci/cider-ci_builder
  [Cider-CI Dispatcher]: https://github.com/cider-ci/cider-ci_dispatcher
  [Cider-CI Executor]: https://github.com/cider-ci/cider-ci_executor
  [Cider-CI Repository]: https://github.com/cider-ci/cider-ci_repository
  [Cider-CI Reverse Proxy]: https://github.com/cider-ci/cider-ci_reverse-proxy
  [Cider-CI Storage]: https://github.com/cider-ci/cider-ci_storage
  [Cider-CI User-Interface]: https://github.com/cider-ci/cider-ci_user-interface

  [Bundler]: http://bundler.io/
  [Leiningen]: http://leiningen.org/
  [Nodejs]: https://nodejs.org/
  [Ruby]: https://www.ruby-lang.org/
  [rbenv]: https://github.com/sstephenson/rbenv
